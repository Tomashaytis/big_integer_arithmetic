#include "bintlib.h"
#include <iomanip>
#include <chrono>

using namespace std;

int main() {
	BigInt number1("4875680655534215464197557596364884536622194344612628622766213785963657229255135811159919600509908398135702734659677623796154996990704482003355625390107810119532477245868878555737706315342642466981201648783449207631663193065540602538535783806808618494871860679894729883308608795586438814463408670710834211307789957655274810547918543901677430373411940497196382946459193203176470328445478893001452654908465903365653349774772623952401357593425649929512188328800806942698418136893962456356844744378408594938014303670278860206022204937052380908985798617496431484955852710418759873519753652090586474512636485581911151712103");
	BigInt number2("20753133091057742338546795543075927033951693313260073107210494997478557422775306511539071131500981604606527223579187186405507972249451995823718638661190414637008507782942022355989344871623984333415999717053429689649748576037740481377272886098869555898201461645108449928455506945270194315372933310165195679378956767873166482453530066253693073739734368656701848413420489210196856227987510875474958955722124759136530196876073104949529961452724402789956053861951061723163485210737416300850213277775699289871133529802879284942716068316264290436831474877016264368494624668630069270517617459442476068746331699190469534151611");
	BigInt number3("55011780998801947781103947780659027045822035240716304716614713593067820797341998995034169228975080678382558151731499806668802075993960380024918104339025816377383245978005482825007646811757589981996916085551201082476553166084681611904151232972183117518546093818178715949864809508545039489348303853554092460212");
	BigInt number4("14776071682915459064");
	BigInt number5("40");
	BigInt number6("137130462909417371581865483489043797725909059024661411704723085022816692663284008207826785132470756353352621332808019668785759110990576815741502628035997147255459016128105305451010585699069674494217365521467940783164171729442866016775055913991624626502191730619275815532321664270492537447637102633611801007453");
	BigInt number7("72043406869177803751894274962039778129037184788495438808783682470712771829673580197454927629368550993904993435657872214677204027539315894104294827097569001713019602823109417649637402335132293936362018021030095354162109943927457310677906999505382979109904937525290267347750331928787433380768153492665561964240263881057092856608711613315224508587571388140861339981990502214373810792831573105509943241475567334886598154606494312105190572970861742670717080077107402388830803864961473590027105251827909871570978891904865843790046638216772212994832629838055379392575161445139399132274954568124946968671812662935276713516276833244769809851592");
	BigInt number8("306649782198554077790060910227087237190335527965444634722474870460744065138249510932346809564122015700502737195524819970012003149127949328229252539266919452075867311153973927477153900803616160711149892602692869941809696014487650209398612980428465564299980427245959290167829223920955987415781928468655896959118406166494046493066789751649859112753690690739500766597694330852996119046580508554988586635510105995392148389888782051646469311284823095566498603522093978067065401457696410630837546813956588876285279252811920226118835863912978347470056329036500349705391861026922040469969158201219975022296624165524155678635787989234651840152104");
	
	BigInt true_sum("25628813746591957802744353139440811570573887657872701729976708783442214652030442322698990732010890002742229958238864810201662969240156477827074264051298224756540985028810900911727051186966626800397201365836878897281411769103281083915808669905678174393073322325003179811764115740856633129836341980876029890686746725528441293001448610155370504113146309153898231359879682413373326556432989768476411610630590662502183546650845728901931319046150052719468242190751868665861903347631378757207058022154107884809147833473158145148738273253316671345817273494512695853450477379048829144037371111533062543258968184772380685863714");
	BigInt true_sub("-15877452435523526874349237946711042497329498968647444484444281211514900193520170700379151530991073206470824488919509562609352975258747513820363013271082604517476030537073143800251638556281341866434798068269980482018085382972199878838737102292060937403329600965213720045146898149683755500909524639454361468071166810217891671905611522352015643366322428159505465466961296007020385899542031982473506300813658855770876847101300480997128603859298752860443865533150254780465067073843453844493368533397290694933119226132600424736693863379211909527845676259519832883538771958211309396997863807351889594233695213608558382439508");
	BigInt true_mul("101185649553797232435820177006304652127367292805278765630073704593301347503964118922241126460774237927269208421041508593718096178658171025016947178541941082728437580641856115699274652477723212732093104281999507030560671840163351492460243175852548811017278308682798545309114322177181200531258535786089030248555040468058248760849734731665701948266906750011840080874158268523099237142960053952931462625276278665253505931357999528293410799000499484025030438131627955650697433959946696141503202201711311073246567403391009693574878209007614960430920537647790042422535489221398996678490462758561300560736185958065450246858462281768517236036573292543879305268115401785894047269503480347560313138448093495268662310032655059027977989807696161929807524848777650782293687283284803312405997775499012244938420783105968547654922831661254213191902075996272155361461403049651246471499848227357316177608775392900938958745477344892987205601793029666216628001425746081522379280965385029063687592337421244746966596432370260230407620608765049753866557197377257802252212059331118442008593920211841496422221049567401998341865061645199398388390273943040908544522519745328198571562888937376672844405483107567909063546680529167211482864256964563692192225647933");
	BigInt true_sqr("23772261854750557034065139503876943655091556035313965418330314962575022303611575258606033421792847978610153678727110041563358617524697287592585642520491280467377362795657409692409211996693937036202274928324201574188616799430997119700878798861560414679405186523256941912685456709007417151605681583433820638043906632795719012984290382675623187917572429874163174122347324004850681166946188318803770410708343553315609354251992501011081293242265489850465335767172857532499960425072840253797116387900521453881506678207201057934170985665810631058876897062619298211997210449300946968044370800995882399988667410402920538107062800903270429321654905335413357664153565009561254183670198173684629282769599398530905532762076730742984428038757665191741605780875644343657888854740608758797139791858832517555404985132104207319726924824854216857586151197445916813249413382342885962336527227472097513466672806566634049376339204908975021131641265257636297172974191104508551458391789277481179491561275692051383581121417021484301958519224739724383054734822858836318598005892787857564431787441615786068288478401184276753128441897506039058480692963981042942596257911731511444453392287331457890769851098663841777651678879841947920253016242816154228196682609");
	BigInt true_div("88629754700005050526833724219151263300565644114877701120699387300054815656309608132911390484161861187556505371660775511066396964711401810318098380549730352518748466432365385157352230374180309030186293340765367334101559325124372177112951253566868626254731960861075402095863531993438522574761768375535038912675");
	BigInt true_mod("7125213253353847880674935326218216668125997640948238500365095030393262364931316999206133266546135083078537735145441324250120045641284054152425729469609343176830717285681209430884192367090506656230700240834767981739864082992868315487143870114162366333451631281010706702326130514434922648095025873666971725003");
	BigInt true_lsh("9889430103809545761970474681678985925445248954456180412111455758494826988801895881699397546048775934535869505981920427784239039435031057624410254759006802406900290932669792226475116889557936913512838464749825580419371442054298397764692339643639148264756572670773104041285919457877406998140178666864739904239559168238899225176868900753613130647491112664276953229409272122673746228118759442029456241376388349331191921874969592568014644352461575857707933440374078855654872977313540882137714122550226058479165389978091727631506201525043107354226125844311912422390302517148126752469924082139762172035086262909726508449792");
	BigInt true_rsh("27121873922646094564796417391939245058143649354405398833700548426409359779380719309593679415961919451228921978923154578800076143938921990078306309840359496985633030950261510706364209637141088971113888052235763801431379715281730024059725626315941965881438944114800130613429380488525840274655922959068927922709");
	BigInt true_gcd("44328215048746377192");
	BigInt true_inv("128011918123600561254430154676502646396170809563961718281097103255097767763307532080903910390457474479684782531373628493400850014202842107199139935754769943310027583108097813852687409520778110912354538662321276210943256503314578283371554293837760881315381143440568657500851564672828656027393584710865188462757");
	BigInt true_pow("60584227260219618462735745470763058105957878669237547831904206479424325472213993922328768911869529333579680068207980787476909424872530305085925956094411116603532714575853243042327676375290411842866512563764153331337704487561135896245858893077510443517995340364905582265757696579336668083148740555779153739029287848782810769016814803867332937271208713001964316339110713343913922927802790021546684845449173943991882341003013134584152693026434589466156425477447329449636007061540884414394107113388296772681947904051230400087404075719927364369971045273317631894412638851623033807360734582828310619521533045588471676919232143340711497727186254411930059791562821267507072298743501285436257401180219421202846383527264163273386231770758868054285083507224632101275834070859776");
	BigInt true_mml("111704010787515824824897764399485748083991997850824168951805872768197541407197785211684774552341281545002522444860064624100014933500933052393768230434029471991091163751477596697078611297744351079251891715654195503430088849920364746295766803835559320460001287535831701007660991691603828969906539681928311458096");
	BigInt true_mpw("123964847814264146755860066102368251842143506090646068348911167597185700850013680145974288781695750961694406439470070751766662168578187623025125985589770445322210001805432986921810372826742860381172848438114301578944344631940880469902455995307024990595515094287849357232983422563184003012997800649897432333323");

	chrono::steady_clock::time_point begin, end;
	chrono::duration<double> duration;
	int precision = 7;

	std::cout << "operation" << "\t\t" << "algorithm" << "\t\t" << "time, s" << "\t\t\t" << "status" << std::endl;
	std::cout << "-----------------" << "\t" << "-------------" << "\t\t" << "------------" << "\t\t" << "----------" << std::endl;

	begin = chrono::high_resolution_clock::now();
	BigInt result = number1 + number2;
	end = chrono::high_resolution_clock::now();
	duration = end - begin;
	bool status = true_sum == result;
	std::cout << "summation" << "\t\t" << "basic" << "\t\t\t" << std::fixed << std::setprecision(precision) << duration.count() << "\t\t" << (status ? "valid" : "invalid") << std::endl;

	begin = chrono::high_resolution_clock::now();
	result = number1 - number2;
	end = chrono::high_resolution_clock::now();
	duration = end - begin;
	status = true_sub == result;
	std::cout << "substruction" << "\t\t" << "basic" << "\t\t\t" << std::fixed << std::setprecision(precision) << duration.count() << "\t\t" << (status ? "valid" : "invalid") << std::endl;

	begin = chrono::high_resolution_clock::now();
	result = number1 * number2;
	end = chrono::high_resolution_clock::now();
	duration = end - begin;
	status = true_mul == result;
	std::cout << "multiplication" << "\t\t" << "karatsuba" << "\t\t" << std::fixed << std::setprecision(precision) << duration.count() << "\t\t" << (status ? "valid" : "invalid") << std::endl;

	begin = chrono::high_resolution_clock::now();
	result = BigInt::karatsuba_square(number1);
	end = chrono::high_resolution_clock::now();
	duration = end - begin;
	status = true_sqr == result;
	std::cout << "squaring" << "\t\t" << "karatsuba" << "\t\t" << std::fixed << std::setprecision(precision) << duration.count() << "\t\t" << (status ? "valid" : "invalid") << std::endl;

	begin = chrono::high_resolution_clock::now();
	result = number1 / number3;
	end = chrono::high_resolution_clock::now();
	duration = end - begin;
	status = true_div == result;
	std::cout << "division" << "\t\t" << "fast" << "\t\t\t" << std::fixed << std::setprecision(precision) << duration.count() << "\t\t" << (status ? "valid" : "invalid") << std::endl;

	begin = chrono::high_resolution_clock::now();
	result = number1 % number3;
	end = chrono::high_resolution_clock::now();
	duration = end - begin;
	status = true_mod == result;
	std::cout << "remainder" << "\t\t" << "fast" << "\t\t\t" << std::fixed << std::setprecision(precision) << duration.count() << "\t\t" << (status ? "valid" : "invalid") << std::endl;

	begin = chrono::high_resolution_clock::now();
	result = number3 << 1024;
	end = chrono::high_resolution_clock::now();
	duration = end - begin;
	status = true_lsh == result;
	std::cout << "left shift" << "\t\t" << "basic" << "\t\t\t" << std::fixed << std::setprecision(precision) << duration.count() << "\t\t" << (status ? "valid" : "invalid") << std::endl;

	begin = chrono::high_resolution_clock::now();
	result = number1 >> 1024;
	end = chrono::high_resolution_clock::now();
	duration = end - begin;
	status = true_rsh == result;
	std::cout << "right shift" << "\t\t" << "basic" << "\t\t\t" << std::fixed << std::setprecision(precision) << duration.count() << "\t\t" << (status ? "valid" : "invalid") << std::endl;

	begin = chrono::high_resolution_clock::now();
	result = BigInt::gcd(number7, number8);
	end = chrono::high_resolution_clock::now();
	duration = end - begin;
	status = true_gcd == result;
	std::cout << "gcd" << "\t\t\t" << "euclidean" << "\t\t" << std::fixed << std::setprecision(precision) << duration.count() << "\t\t" << (status ? "valid" : "invalid") << std::endl;

	begin = chrono::high_resolution_clock::now();
	result = BigInt::mod_inverse(number4, number6);
	end = chrono::high_resolution_clock::now();
	duration = end - begin;
	status = true_inv == result;
	std::cout << "modular inverse" << "\t\t" << "euclidean (ex)" << "\t\t" << std::fixed << std::setprecision(precision) << duration.count() << "\t\t" << (status ? "valid" : "invalid") << std::endl;

	begin = chrono::high_resolution_clock::now();
	result = BigInt::binary_pow(number4, number5);
	end = chrono::high_resolution_clock::now();
	duration = end - begin;
	status = true_pow == result;
	std::cout << "power" << "\t\t\t" << "binary" << "\t\t\t" << std::fixed << std::setprecision(precision) << duration.count() << "\t\t" << (status ? "valid" : "invalid") << std::endl;

	begin = chrono::high_resolution_clock::now();
	result = BigInt::pow(number4, number5, 4);
	end = chrono::high_resolution_clock::now();
	duration = end - begin;
	status = true_pow == result;
	std::cout << "power" << "\t\t\t" << "q-ary (4)" << "\t\t" << std::fixed << std::setprecision(precision) << duration.count() << "\t\t" << (status ? "valid" : "invalid") << std::endl;

	begin = chrono::high_resolution_clock::now();
	result = BigInt::pow(number4, number5, 8);
	end = chrono::high_resolution_clock::now();
	duration = end - begin;
	status = true_pow == result;
	std::cout << "power" << "\t\t\t" << "q-ary (8)" << "\t\t" << std::fixed << std::setprecision(precision) << duration.count() << "\t\t" << (status ? "valid" : "invalid") << std::endl;

	begin = chrono::high_resolution_clock::now();
	result = BigInt::pow(number4, number5, 16);
	end = chrono::high_resolution_clock::now();
	duration = end - begin;
	status = true_pow == result;
	std::cout << "power" << "\t\t\t" << "q-ary (16)" << "\t\t" << std::fixed << std::setprecision(precision) << duration.count() << "\t\t" << (status ? "valid" : "invalid") << std::endl;

	begin = chrono::high_resolution_clock::now();
	result = BigInt::montgomery_mul(number1, number2, number6);
	end = chrono::high_resolution_clock::now();
	duration = end - begin;
	status = true_mml == result;
	std::cout << "multiplication" << "\t\t" << "montgomery" << "\t\t" << std::fixed << std::setprecision(precision) << duration.count() << "\t\t" << (status ? "valid" : "invalid") << std::endl;

	begin = chrono::high_resolution_clock::now();
	result = BigInt::montgomery_pow(number4, number5, number6, 2);
	end = chrono::high_resolution_clock::now();
	duration = end - begin;
	status = true_mpw == result;
	std::cout << "power" << "\t\t\t" << "montgomery (2)" << "\t\t" << std::fixed << std::setprecision(precision) << duration.count() << "\t\t" << (status ? "valid" : "invalid") << std::endl;

	begin = chrono::high_resolution_clock::now();
	result = BigInt::montgomery_pow(number4, number5, number6, 4);
	end = chrono::high_resolution_clock::now();
	duration = end - begin;
	status = true_mpw == result;
	std::cout << "power" << "\t\t\t" << "montgomery (4)" << "\t\t" << std::fixed << std::setprecision(precision) << duration.count() << "\t\t" << (status ? "valid" : "invalid") << std::endl;

	begin = chrono::high_resolution_clock::now();
	result = BigInt::montgomery_pow(number4, number5, number6, 8);
	end = chrono::high_resolution_clock::now();
	duration = end - begin;
	status = true_mpw == result;
	std::cout << "power" << "\t\t\t" << "montgomery (8)" << "\t\t" << std::fixed << std::setprecision(precision) << duration.count() << "\t\t" << (status ? "valid" : "invalid") << std::endl;

	begin = chrono::high_resolution_clock::now();
	result = BigInt::montgomery_pow(number4, number5, number6, 16);
	end = chrono::high_resolution_clock::now();
	duration = end - begin;
	status = true_mpw == result;
	std::cout << "power" << "\t\t\t" << "montgomery (16)" << "\t\t" << std::fixed << std::setprecision(precision) << duration.count() << "\t\t" << (status ? "valid" : "invalid") << std::endl;

	return 0;
}
